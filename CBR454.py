fout=open('Resultado da análise.txt','w')# Definição de funçõesdef verificaAGCONTA(k,a,b,banco):    if a==b==0:        num = k        N = num[:-1]        S = 0        for i in range(1,len(N)+1):            m = int(N[-i])            S = S + m*(i+1)        d = 11 - S%11        if banco == '001':            if d == 10:                d = 'X'            elif d == 11:                d = '0'        N=str(d)        if N != num[-1]:            fout.write('Agência/Conta inválida\n')    elif a==b==banco==0:        num = k        N = num[:-1]        S = 0        for i in range(1,len(N)+1):            m = int(N[-i])            S = S + m*(i+1)        d = 11 - S%11        N=str(d)        if N != num[-1]:            fout.write('Dígito verficador inválido\n')    elif a!=b:        num = L[k][a-1:b]        N = num[:-1]        S = 0        for i in range(1,len(N)+1):            m = int(N[-i])            S = S + m*(i+1)        d = 11 - S%11        if banco == '001':            if d == 10:                d = 'X'            elif d == 11:                d = '0'        N=str(d)        if N != num[-1]:            fout.write('Posições %d a %d: Valor esperado - %s; Valor encontrado - %s\n'%(a,b,num[:-1]+str(d),num))def verificaCNPJ(k,a,b):    if a==b==0:        CNPJ = k        N=CNPJ[:-2]        for k in range(0,2):            S = 0            for i in range(1,9):                m = int(N[-i])                S = S + m*(i+1)            if len(N)>8:                for j in range(1,len(N)-7):                    m = int(N[-j-8])                    S = S + m*(j+1)            d = 11 - S%11            if d == 10:                d = 0            elif d == 11:                d = 0            N = N + str(d)        if N[-2:] != CNPJ[-2:]:            fout.write('CNPJ inválido\n')    elif a!=b:        CNPJ = L[k][b-14:b]        N=CNPJ[:-2]        if N.isdigit()==False:            fout.write('Posições %d a %d: Valor esperado - Valores numéricos; Valor encontrado - %s\n'%(b-13,b,CNPJ))        else:            for k in range(0,2):                S = 0                for i in range(1,9):                    m = int(N[-i])                    S = S + m*(i+1)                if len(N)>8:                    for j in range(1,len(N)-7):                        m = int(N[-j-8])                        S = S + m*(j+1)                d = 11 - S%11                if d == 10:                    d = 0                elif d == 11:                    d = 0                N = N + str(d)            if N[-2:] != CNPJ[-2:]:                fout.write('Posições %d a %d: Valor esperado - %s; Valor encontrado - %s\n'%(b-13,b,N,CNPJ))def verificaCPF(k,a,b):    if a==b==0:        CPF = k        N = CPF[:-2]        S = 0        for i in range(1,10):            m = int(N[i-1])            S = S + m*(i)        d = S%11        if d == 10:            d = 0        elif d == 11:            d = 0        N = N + str(d)        S=0        for i in range(0,10):            m = int(N[i])            S = S + m*(i)        d = S%11        if d == 10:            d = 0        elif d == 11:            d = 0        N = N + str(d)        if N!=CPF:            fout.write('CPF inválido\n')    if a!=b:        CPF = L[k][b-11:b]        N = CPF[:-2]        S = 0        if N.isdigit()==False:            fout.write('Posições %d a %d: Valor esperado - Valores numéricos; Valor encontrado - %s\n'%(b-10,b,CPF))        else:            for i in range(1,10):                m = int(N[i-1])                S = S + m*(i)            d = S%11            if d == 10:                d = 0            elif d == 11:                d = 0            N = N + str(d)            S=0            for i in range(0,10):                m = int(N[i])                S = S + m*(i)            d = S%11            if d == 10:                d = 0            elif d == 11:                d = 0            N = N + str(d)            if N!=CPF:                fout.write('Posições %d a %d: Valor esperado - %s; Valor encontrado - %s\n'%(b-10,b,N,CPF))def verificaCART(k):    if k not in ['11','12','17','31','51']:        fout.write('Carteira inválida. Utilize, 11,12,17,31 ou 51\n')def verificaTamanho(k,a):    if len(k)!= a:        fout.write('Formato invalido - o registro deve conter %d posições\n'%a)        def compara(k,a,b,J):    if len(J)==1:        if a<b and L[k][a-1:b] not in J:            fout.write('Posições %d a %d: Valor esperado -'%(a,b)+ J +'; Valor encontrado - %s\n'%L[k][a-1:b])        elif a==b and L[k][a-1] not in J:            fout.write('Posição %d: Valor esperado - '%a+ J+'; Valor encontrado - %s\n'%L[k][a-1:b])    elif len(J)>1:        if a<b and L[k][a-1:b] not in J:            fout.write('Posições %d a %d: Valores esperados -'%(a,b)+ J +'; Valor encontrado - %s\n'%L[k][a-1:b])        elif a==b and L[k][a-1] not in J:            fout.write('Posição %d: Valores esperados - '%a+ J+'; Valor encontrado - %s\n'%L[k][a-1:b])def verificaTipo(k,a,b,tipo):    if tipo=='digit':        if L[k][a-1:b].isdigit()==False:            fout.write('Posições %d a %d: Valores esperados - valores numéricos; Valores encontrados - %s\n'%(a,b,L[k][a-1:b]))    if tipo=='name':        if L[k][a-1:b]==' '*len([k][a-1:b]):                fout.write('Posições %d a %d: Valores esperados - valores alfanuméricos; Valores encontrados - %s\n'%(a,b,L[k][a-1:b]))def verificaTipoDigit(k,a,b):    if L[k][a-1:b].isdigit()==True:        return True    else:        return False                def verificaNome(k,a,b,nome):        if nome.upper() not in L[k][a-1:b].upper():            fout.write('Posições %d a %d: Valor esperado - %s; Valor encontrado - %s\n'%(a,b,nome,L[k][a-1:b]))def verificaData(k,a,b):    if L[k][a+1:a+3] not in ['01','02','03','04','05','06','07','08','09','10','11','12']:        fout.write('Posições %d a %d: Valores esperados - [01,02,03,04,05,06,07,08,09,10,11,12]; Valor encontrado - %s\n'%(a+1,a+2,L[k][a+1:a+3]))    elif L[k][a+1:a+3] in ['01','03','05','07','08','10','12'] and (int(L[k][a-1:a+1])>31 or int(L[k][a-1:a+1])==0):        fout.write('Posições %d a %d: Valores esperados - entre 01 e 31; Valor encontrado - %s\n'%(a-1,a,L[k][a-1:a+1]))    elif L[k][a+1:a+3] in ['02','04','06','09','11'] and (int(L[k][a-1:a+1])>30 or int(L[k][a-1:a+1])==0):        fout.write('Posições %d a %d: Valores esperados - entre 01 e 30; Valor encontrado - %s\n'%(a-1,a,L[k][a-1:a+1]))def verificaHora(k,a,b):    if int(L[k][a-1:a+1])>24:        fout.write('Posições %d a %d: Valores esperados - entre 00 e 24; Valor encontrado - %s\n'%(a,a+1,L[k][a-1:a+1]))    if int(L[k][a+1:a+3])>59:        fout.write('Posições %d a %d: Valores esperados - entre 00 e 59; Valor encontrado - %s\n'%(a+2,a+3,L[k][a+1:a+3]))    if int(L[k][a+3:a+5])>59:        fout.write('Posições %d a %d: Valores esperados - entre 00 e 59; Valor encontrado - %s\n'%(a+4,a+5,L[k][a+3:a+5]))def verificaCodBarras(k,a,b):    A=L[k][a-1:b]    B = A[0:4] + '0' + A[5:44]    S = int(B[0])*4 + int(B[1])*3 +int(B[2])*2 + int(B[3])*9    for i in range(13,53,8):        for j in range(9,1,-1):            S = S + int(B[i-j])*j    if S%11 in [0,10,11]:        d=1    else:        d = 11- S%11    B = A[0:4] + str(d) + A[5:44]    if d != A[4]:        fout.write('Posições %d a %d: Valor esperado: %s - Valor encontrado: %s\n'%(a,b,B,A))#Declaração de variáveiscontHL=0contDetalheAB=0contDetalheJT=0somaA=0somaJ=0CNPJint = int(input('CNPJ: '))verificaCNPJ(str(CNPJint).zfill(14),0,0)CNPJstr = str(CNPJint).zfill(14)CPFint = int(input('CPF: '))verificaCPF(str(CPFint).zfill(11),0,0)CPFstr = str(CPFint).zfill(14)CONVint = int(input('Convênio: '))CONVstr = str(CONVint).zfill(7)AGstr = input('Agência: ').zfill(5).upper()verificaAGCONTA(AGstr,0,0,'001')CONTAstr = input('Conta: ').zfill(13).upper()verificaAGCONTA(CONTAstr,0,0,'001')NOME_CONV = input('Nome: ').upper()LOGR_CONV = input('Logradouro: ').upper()NUM_CONVint = int(input('Número: '))NUM_CONVstr = str(NUM_CONVint).zfill(5)COMP_CONV = input('Complemento: ').upper()CID_CONV = input('Cidade: ').upper()CEP_CONVint = int(input('CEP: '))CEP_CONVstr = str(CEP_CONVint)EST_CONV = input('Estado: ').upper()CARTint = int(input('Carteira: '))CARTstr = str(CARTint)verificaCART(CARTstr)VARint = int(input('Variação: '))VARstr = str(VARint)verificaAGCONTA(VARstr,0,0,0)MOD = int(input('Modalidade (1 - Simples; 2 - Vinculada; 3 - Descontada: '))TIPO_CONV = int(input('Tipo de convênio (1,2,3,4 ou 5): '))n_REMESSAint = int(input('Número da última remessa gerada: '))n_REMESSAstr = str(n_REMESSAint+1).zfill(7)n_PARCELASint = int(input('Número de parcelas do carnê: '))n_PARCELASstr = str(n_PARCELASint)print('\n')#Importação e leitura do arquivoL=open('CBR454.txt', 'r').readlines()#Início da validaçãofor x in range (0,len(L)):    #Registro Header de Arquivo    if L[x][0:2] =='01':        H=x        fout.write('Registro Header:\n')        verificaTamanho(L[x],251)        compara(x,3,6,AGstr[2:])        compara(x,7,7,AGstr[4].upper())        verificaTipo(x,8,16,'digit')        verificaTipo(x,17,17,'name')        compara(x,18,20,CARTstr)        compara(x,21,23,VARstr)        compara(x,24,29,'000000')        compara(x,30,74,NOME_CONV)        verificaTipo(x,75,84,'name')        compara(x,85,86,['01','02','03','04','05','06','07','08','09','10','11'])        if L[x][84:86] in ['02','04']:            compara(x,87,146,' '*60)           else:            verificaTipo(x,87,146,'name')        verificaTipo(x,147,154,'digit')        if L[x][84:86] in ['01','03']:            verificaTipo(x,155,174,'name')        if L[x][181]=='S':            compara(x,175,181,n_REMESSAstr)        elif L[x][181]=='N':            compara(x,175,181,'0000000')        compara(x,182,182,['S','N'])        if L[x][84:86] in ['05','06','07','08','09','10','11']:            compara(x,183,184,'digit')            compara(x,185,186,'  ')        elif L[x][84:86] in ['01','02','03','04']:            compara(x,183,186,'    ')        compara(x,187,194,'CBR454  ')        compara(x,195,197,'   ')        compara(x,198,235,' '*38)        compara(x,236,240,'     ')        compara(x,241,247,CONVstr)        compara(x,248,250,'  ')        fout.write('\n')        #Registro Detalhe Tipo 02:    if L[x][0:2]=='02':        D02=x        contDetalheAB+=1        fout.write('Registro Detalhe Tipo 02:\n')        verificaTamanho(L[x],251)        compara(x,3,3,['1','2','3'])        compara(x,4,4,['1','2','3'])        compara(x,5,5,['1','2','3'])        compara(x,6,6,['1','2','3'])        verificaTipo(x,7,66,'name')        verificaTipo(x,67,126,'name')        verificaTipo(x,127,186,'name')        verificaTipo(x,187,246,'name')        compara(x,247,250,'    ')        fout.write('\n')#Registro Detalhe Tipo 03:    if L[x][0:2]=='03':        D03=x        contDetalheAB+=1        fout.write('Registro Detalhe Tipo 03:\n')        verificaTamanho(L[x],251)        compara(x,3,3,['1','2','3'])        compara(x,4,4,['1','2','3'])        compara(x,5,5,['1','2','3'])        compara(x,246,250,'    ')        fout.write('\n')        #Registro Detalhe Tipo 04:    if L[x][0:2]=='04':        D04=x        contDetalheAB+=1        fout.write('Registro Detalhe Tipo 04:\n')        verificaTamanho(L[x],251)        compara(x,3,3,['1','2','3'])        compara(x,4,4,['1','2','3'])        compara(x,5,5,['1','2','3'])        compara(x,246,250,'    ')        fout.write('\n')#Registro Detalhe Tipo 05:    if L[x][0:2]=='05':        D05=x        contDetalheAB+=1        fout.write('Registro Detalhe Tipo 05:\n')        verificaTamanho(L[x],251)        compara(x,3,3,['1','2','3'])        compara(x,4,4,['1','2','3'])        compara(x,5,5,['1','2','3'])        compara(x,6,6,['1','2','3'])        verificaTipo(x,7,66,'name')        verificaTipo(x,67,126,'name')        verificaTipo(x,127,186,'name')        verificaTipo(x,187,246,'name')        compara(x,247,250,'    ')        fout.write('\n')        #Registro Detalhe Tipo 11:    if L[x][0:2]=='11':        D11=x        contDetalheAB+=1        fout.write('Registro Detalhe Tipo 11:\n')        verificaTamanho(L[x],251)        compara(x,3,3,['1','2','3'])        if L[x][2]=='1':            verificaCPF(x,4,18)        elif L[x][2]=='2':            verificaCNPJ(x,4,18)        elif L[x][2]=='3':            compara(x,4,18,'000000000000000')        verificaTipo(x,19,78,'name')        verificaTipo(x,79,138,'name')        verificaTipo(x,139,146,'digit')        verificaTipo(x,147,164,'name')        compara(x,165,166,['AC','AL','AP','AM','BA','CE','DF','ES','GO','MA','MT','MS','MG','PA','PB','PR','PE','PI','RJ','RN','RS','RO','RR','SC','SP','SE','TO'])        verificaData(x,167,172)        verificaData(x,173,178)        compara(x,179,179,['S','N'])        compara(x,180,181,['AP','DU','DE','DP','DM','DS','LC','ND','RC','SG','NP'])        compara(x,182,188,CONVstr)        verificaTipo(x,189,198,'digit')        verificaTipo(x,199,208,'name')        compara(x,209,210,['01','02','06','07','08','09','10'])        if L[x][208:210]=='09':            compara(x,211,225,'000000000000000')        verificaTipo(x,226,240,'digit')        verificaTipo(x,241,242,'digit')        compara(x,243,248,'      ')        compara(x,249,250,n_PARCELASstr)        fout.write('\n')#Registro Detalhe Tipo 12:    if L[x][0:2]=='12':        D12=x        contDetalheAB+=1        fout.write('Registro Detalhe Tipo 12:\n')        verificaTamanho(L[x],251)        verificaTipo(x,3,7,'digit')        verificaData(x,8,13)        compara(x,14,20,CONVstr)        verificaTipo(x,21,30,'digit')        verificaTipo(x,31,43,'digit')        verificaTipo(x,44,48,'digit')        verificaData(x,49,54)        compara(x,55,61,CONVstr)        verificaTipo(x,62,71,'digit')        verificaTipo(x,72,84,'digit')        verificaTipo(x,85,89,'digit')        verificaData(x,90,95)        compara(x,96,102,CONVstr)        verificaTipo(x,103,112,'digit')        verificaTipo(x,113,125,'digit')        verificaTipo(x,126,130,'digit')        verificaData(x,131,136)        compara(x,137,143,CONVstr)        verificaTipo(x,144,153,'digit')        verificaTipo(x,154,166,'digit')        verificaTipo(x,167,171,'digit')        verificaData(x,172,177)        compara(x,178,184,CONVstr)        verificaTipo(x,185,194,'digit')        verificaTipo(x,195,207,'digit')        verificaTipo(x,208,212,'digit')        verificaData(x,213,218)        compara(x,219,225,CONVstr)        verificaTipo(x,226,235,'digit')        verificaTipo(x,236,248,'digit')        compara(x,249,250,'  ')        fout.write('\n')        #Registro Trailer de Arquivo:    if L[x][0:2]=='99':        T=x        fout.write('Registro Trailler de Arquivo:\n')        verificaTamanho(L[x],251)        compara(x,3,17,str(contDetalheAB+1))        compara(x,18,250,' '*233)        fout.write('\n')        fout.close()Fim = input('Tecle ENTER para finalizar')