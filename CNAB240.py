fout=open('Resultado da análise.txt','w')# Definição de funçõesdef verificaAGCONTA(k,a,b,banco):    if a==b==0:        num = k        N = num[:-1]        S = 0        for i in range(1,len(N)+1):            m = int(N[-i])            S = S + m*(i+1)        d = 11 - S%11        if banco == '001':            if d == 10:                d = 'X'            elif d == 11:                d = '0'        N=str(d)        if N != num[-1]:            print('Agência/Conta inválida')    elif a!=b:        num = L[k][a-1:b]        N = num[:-1]        S = 0        for i in range(1,len(N)+1):            m = int(N[-i])            S = S + m*(i+1)        d = 11 - S%11        if banco == '001':            if d == 10:                d = 'X'            elif d == 11:                d = '0'        N=str(d)        if N != num[-1]:            fout.write('Posições %d a %d: Valor esperado - %s; Valor encontrado - %s\n'%(a,b,num[:-1]+str(d),num))def verificaCNPJ(k,a,b):    if a==b==0:        CNPJ = k        N=CNPJ[:-2]        for k in range(0,2):            S = 0            for i in range(1,9):                m = int(N[-i])                S = S + m*(i+1)            if len(N)>8:                for j in range(1,len(N)-7):                    m = int(N[-j-8])                    S = S + m*(j+1)            d = 11 - S%11            if d == 10:                d = 0            elif d == 11:                d = 0            N = N + str(d)        if N[-2:] != CNPJ[-2:]:            print('CNPJ inválido')    elif a!=b:        CNPJ = L[k][b-14:b]        N=CNPJ[:-2]        if N.isdigit()==False:            fout.write('Posições %d a %d: Valor esperado - Valores numéricos; Valor encontrado - %s\n'%(b-13,b,CNPJ))        else:            for k in range(0,2):                S = 0                for i in range(1,9):                    m = int(N[-i])                    S = S + m*(i+1)                if len(N)>8:                    for j in range(1,len(N)-7):                        m = int(N[-j-8])                        S = S + m*(j+1)                d = 11 - S%11                if d == 10:                    d = 0                elif d == 11:                    d = 0                N = N + str(d)            if N[-2:] != CNPJ[-2:]:                fout.write('Posições %d a %d: Valor esperado - %s; Valor encontrado - %s\n'%(b-13,b,N,CNPJ))def verificaCPF(k,a,b):    if a==b==0:        CPF = k        N = CPF[:-2]        S = 0        for i in range(1,10):            m = int(N[i-1])            S = S + m*(i)        d = S%11        if d == 10:            d = 0        elif d == 11:            d = 0        N = N + str(d)        S=0        for i in range(0,10):            m = int(N[i])            S = S + m*(i)        d = S%11        if d == 10:            d = 0        elif d == 11:            d = 0        N = N + str(d)        if N!=CPF:            print('CPF inválido')    if a!=b:        CPF = L[k][b-11:b]        N = CPF[:-2]        S = 0        if N.isdigit()==False:            fout.write('Posições %d a %d: Valor esperado - Valores numéricos; Valor encontrado - %s\n'%(b-10,b,CPF))        else:            for i in range(1,10):                m = int(N[i-1])                S = S + m*(i)            d = S%11            if d == 10:                d = 0            elif d == 11:                d = 0            N = N + str(d)            S=0            for i in range(0,10):                m = int(N[i])                S = S + m*(i)            d = S%11            if d == 10:                d = 0            elif d == 11:                d = 0            N = N + str(d)            if N!=CPF:                fout.write('Posições %d a %d: Valor esperado - %s; Valor encontrado - %s\n'%(b-10,b,N,CPF))def compara(k,a,b,J):    if len(J)==1:        if a<b and L[k][a-1:b] not in J:            fout.write('Posições %d a %d: Valor esperado -'%(a,b)+ str(J) +'; Valor encontrado - %s\n'%L[k][a-1:b])        elif a==b and L[k][a-1] not in J:            fout.write('Posição %d: Valor esperado - '%a + str(J) + '; Valor encontrado - %s\n'%L[k][a-1:b])    elif len(J)>1:        if a<b and L[k][a-1:b] not in J:            fout.write('Posições %d a %d: Valores esperados -'%(a,b)+ str(J) +'; Valor encontrado - %s\n'%L[k][a-1:b])        elif a==b and L[k][a-1] not in J:            fout.write('Posição %d: Valores esperados - '%a + str(J) +'; Valor encontrado - %s\n'%L[k][a-1:b])def verificaTipo(k,a,b,tipo):    if tipo=='digit':        if L[k][a-1:b].isdigit()==False:            fout.write('Posições %d a %d: Valores esperados - valores numéricos; Valores encontrados - %s\n'%(a,b,L[k][a-1:b]))    if tipo=='name':        if L[k][a-1:b]==' '*len(L[k][a-1:b]):                fout.write('Posições %d a %d: Valores esperados - valores alfanuméricos; Valores encontrados - %s\n'%(a,b,L[k][a-1:b]))def verificaTipoDigit(k,a,b):    if L[k][a-1:b].isdigit()==True:        return True    else:        return False                def verificaNome(k,a,b,nome):        if nome.upper() not in L[k][a-1:b].upper():            fout.write('Posições %d a %d: Valor esperado - %s; Valor encontrado - %s\n'%(a,b,nome,L[k][a-1:b]))def verificaData(k,a,b):    if L[k][a+1:a+3] not in ['01','02','03','04','05','06','07','08','09','10','11','12']:        fout.write('Posições %d a %d: Valores esperados - [01,02,03,04,05,06,07,08,09,10,11,12]; Valor encontrado - %s\n'%(a+2,a+3,L[k][a+1:a+3]))    elif L[k][a+1:a+3] in ['01','03','05','07','08','10','12'] and (int(L[k][a-1:a+1])>31 or int(L[k][a-1:a+1])==0):        fout.write('Posições %d a %d: Valores esperados - entre 01 e 31; Valor encontrado - %s\n'%(a-1,a,L[k][a-1:a+1]))    elif L[k][a+1:a+3] in ['02','04','06','09','11'] and (int(L[k][a-1:a+1])>30 or int(L[k][a-1:a+1])==0):        fout.write('Posições %d a %d: Valores esperados - entre 01 e 30; Valor encontrado - %s\n'%(a-1,a,L[k][a-1:a+1]))def verificaHora(k,a,b):    if int(L[k][a-1:a+1])>24:        fout.write('Posições %d a %d: Valores esperados - entre 00 e 24; Valor encontrado - %s\n'%(a,a+1,L[k][a-1:a+1]))    if int(L[k][a+1:a+3])>59:        fout.write('Posições %d a %d: Valores esperados - entre 00 e 59; Valor encontrado - %s\n'%(a+2,a+3,L[k][a+1:a+3]))    if int(L[k][a+3:a+5])>59:        fout.write('Posições %d a %d: Valores esperados - entre 00 e 59; Valor encontrado - %s\n'%(a+4,a+5,L[k][a+3:a+5]))def verificaCodBarras(k,a,b):    A=L[k][a-1:b]    B = A[0:4] + '0' + A[5:44]    S = int(B[0])*4 + int(B[1])*3 +int(B[2])*2 + int(B[3])*9    for i in range(13,53,8):        for j in range(9,1,-1):            S = S + int(B[i-j])*j    d = 11- S%11    if d==0 or d==10 or d==11:        d = 1    else:        d = d    B = A[0:4] + str(d) + A[5:44]    if str(d) != A[4]:        fout.write('Posições %d a %d: Valor esperado: %s - Valor encontrado: %s\n'%(a,b,B,A))# Instruções iniciais ao usuárioprint('Renomeie o arquivo a ser analisado com o titulo "CNAB240.txt", e o mantenha na mesma pasta deste programa.\nFavor preencher os dados abaixo para validação.\n')#Declaração de variáveiscontHL=0contDetalheABT=0contDetalheJT=0CNPJint = int(input('CNPJ: '))verificaCNPJ(str(CNPJint).zfill(14),0,0)CNPJstr = str(CNPJint).zfill(14)CPFint = int(input('CPF: '))verificaCPF(str(CPFint).zfill(11),0,0)CPFstr = str(CPFint).zfill(14)CONVint = int(input('Convênio: '))CONVstr = str(CONVint).zfill(9)AGstr = input('Agência: ').zfill(6).upper()verificaAGCONTA(AGstr,0,0,'001')CONTAstr = input('Conta: ').zfill(13).upper()verificaAGCONTA(CONTAstr,0,0,'001')NOME_CONV = input('Nome: ').upper()LOGR_CONV = input('Logradouro: ').upper()NUM_CONVint = int(input('Número: '))NUM_CONVstr = str(NUM_CONVint).zfill(5)COMP_CONV = input('Complemento: ').upper()CID_CONV = input('Cidade: ').upper()CEP_CONVint = int(input('CEP: '))CEP_CONVstr = str(CEP_CONVint)EST_CONV = input('Estado: ').upper()print('\n')#Importação e leitura do arquivoL=open('CNAB240.txt', 'r').readlines()#Início da validaçãofor x in range (0,len(L)):    #Registro Header de Arquivo    if L[x][7] =='0':        HA=x        fout.write('Registro Header de Arquivo:\n')        compara(x,1,3,'001')        compara(x,4,7,'0000')        compara(x,9,17,'         ')        compara(x,18,18,['1','2'])        if L[x][17]=='1' and L[x][18:32]!= CPFstr:            compara(x,19,32,CPFstr)        if L[x][17]=='2' and L[x][18:32]!= CNPJstr:            compara(x,19,32,CNPJstr)        compara(x,33,41,CONVstr)        compara(x,42,45,'0126')        compara(x,46,50,'     ')        compara(x,51,52,'  ')        compara(x,53,57,AGstr[0:5])        compara(x,58,58,AGstr[5].upper())        compara(x,59,70,CONTAstr[0:12])        compara(x,71,71,CONTAstr[12].upper())        verificaNome(x,73,102,NOME_CONV)        compara(x,103,132,['BANCO DO BRASIL S.A.          ','BANCO DO BRASIL               ', 'BANCO DO BRASIL S/A           '])        compara(x,133,142,'          ')        compara(x,143,143,'1')        verificaData(x,144,151)        verificaHora(x,152,157)        verificaTipo(x,158,163,'digit')        compara(x,172,191,['                    ','00000000000000000000'])               compara(x,212,240,['                             ','           CSP000            '])        fout.write('\n')#Registro Header de Lote    if L[x][7] == '1':        contHL+=1        if L[x][9:11] in ['20','30','98'] and L[x][11:13] in ['01','02','03','04','05','10','41','43']:            HLAB=x            HL='AB'            somaA=0            contDetalheAB=0            fout.write('Registro Header de Lote AB:\n')            compara(x,1,3,'001')            compara(x,4,7,str(contHL).zfill(4))            compara(x,9,9,'C')        elif L[x][9:11]=='98' and L[x][11:13] in ['30','31']:            HLJ=x            HL='J'            somaJ=0            contDetalheJ=0            fout.write('Registro Header de Lote J:')            compara(x,1,3,'001')            compara(x,4,7,str(contHL).zfill(4))            compara(x,9,9,'C')        compara(x,17,17,' ')        compara(x,18,18,['1','2'])        if L[x][17]=='1' and L[x][18:32]!= CPFstr:            compara(x,19,32,CPFstr)        if L[x][17]=='2' and L[x][18:32]!= CNPJstr:            compara(x,19,32,CNPJstr)        compara(x,33,41,CONVstr)        compara(x,42,45,'0126')        compara(x,46,50,'     ')        compara(x,51,52,'  ')        compara(x,53,57,AGstr[0:5])        compara(x,58,58,AGstr[5].upper())        compara(x,59,70,CONTAstr[0:12])        compara(x,71,71,CONTAstr[12].upper())        verificaNome(x,73,102,NOME_CONV)        compara(x,223,230,'        ')        compara(x,231,240,'          ')        fout.write('\n')#Registro Detalhe Segmento A:    if L[x][7]=='3' and L[x][13] == 'A':        A=x        contDetalheAB+=1        contDetalheABT+=1        fout.write('Registro Detalhe segmento A:\n')        compara(x,1,3,'001')        compara(x,4,7,L[HLAB][3:7])        compara(x,9,13,str(contDetalheAB).zfill(5))        compara(x,14,14,'A')        compara(x,15,15,['0','9'])        compara(x,16,17,['00','99'])        if L[HLAB][11:13]=='03':            compara(x,18,20,['700','018'])        elif L[HLAB][11:13] in ['41','43']:            compara(x,18,20,'018')        elif L[HLAB][11:13]=='01':            compara(x,18,20,'000')        verificaTipo(x,21,23,'digit')        verificaAGCONTA(x,24,29,L[x][20:23])        verificaAGCONTA(x,30,42,L[x][20:23])        compara(x,43,43,' ')        verificaTipo(x,44,73,'alnum')        verificaTipo(x,74,85,'alnum')        verificaData(x,94,101)        compara(x,102,104,'BRL')        compara(x,105,119,'000000000000000')        verificaTipo(x,120,134,'digit')        if verificaTipoDigit(x,120,134):            somaA=somaA + int(L[x][119:134])        compara(x,135,154,'                    ')        compara(x,155,162,'00000000')        compara(x,163,177,'000000000000000')        verificaTipo(x,178,217,'alnum')        compara(x,218,219,['01','02','03','04','05','06','07','08','09','10','11','12','13','16','17','18','19'])        compara(x,220,224,['00001', '00002', '00003', '00004', '00005', '00006', '00007', '00008', '00009', '00010', '00011', '00012', '00013', '00014', '00015', '00016', '00017', '00018', '00019', '00020', '00021', '00022', '00023', '00024', '00025', '00026', '00027', '00028', '00029', '00030', '00031', '00032', '00033', '00034', '00035', '00036', '00037', '00038', '00039', '00040', '00041', '00042', '00043', '00044', '00045', '00047', '00050', '00097', '00100', '00101', '00103', '00104', '00107', '00108', '00109', '00110', '00111', '00112', '00113', '00114', '00117', '00123', '00124', '00131', '00132', '00139', '00200', '00201', '00202', '00203', '00204', '00205', '00206', '00207', '00208', '00209', '00300', '00301', '00302', '00303', '00400', '00500', '00501', '00502', '00503', '00504', '00505', '00506', '00507', '00508', '00509', '00510', '00511', '00512', '00513', '00514', '00515', '00516', '00517', '00518', '00519', '00520', '99999'])        verificaTipo(x,225,226,'alnum')        compara(x,227,229,'   ')        compara(x,230,230,['0','5'])        compara(x,231,240,'          ')        fout.write('\n')        #Registro Detalhe Segmento B:    if L[x][7]=='3' and L[x][13] == 'B':        B=x        contDetalheAB+=1        contDetalheABT+=1        fout.write('Registro Detalhe segmento B:\n')        compara(x,1,3,'001')        compara(x,4,7,L[HLAB][3:7])        compara(x,9,13,str(contDetalheAB).zfill(5))        compara(x,14,14,'B')        compara(x,15,17,'   ')        compara(x,18,18,['0','1','2','3','9'])        if L[x][17]=='1':            verificaCPF(x,19,32)        elif L[x][17]=='2':            verificaCNPJ(x,19,32)        compara(x,226,226,['0','5'])        compara(x,233,240,'        ')        fout.write('\n')#Registro Detalhe Segmento J:    if L[x][7]=='3' and L[x][13]=='J' and L[x][17:19]!='52':        J=x        contDetalheJ+=1        contDetalheJT+=1        fout.write('Registro Detalhe segmento J:\n')        compara(x,1,3,'001')        compara(x,4,7,L[HLJ][3:7])        compara(x,9,13,str(contDetalheJ).zfill(5))        compara(x,15,15,['0','9'])        compara(x,16,17,['00','99'])        verificaCodBarras(x,18,61)        verificaTipo(x,62,91,'name')        verificaData(x,92,99)        verificaTipo(x,100,114,'digit')        verificaTipo(x,115,129,'digit')        compara(x,130,144,'000000000000000')        verificaData(x,145,152)        verificaTipo(x,153,167,'digit')        if verificaTipoDigit(x,153,167):            somaJ=somaJ + int(L[x][152:167])        compara(x,168,182,'000000000000000')        verificaTipo(x,183,202,'alnum')        verificaTipo(x,203,22,'alnum')        compara(x,223,224,'09')        compara(x,225,230,'      ')        compara(x,231,240,'          ')        fout.write('\n')#Registro Detalhe Segmento J52:    if L[x][7]=='3' and L[x][13]=='J' and L[x][17:19]=='52':        J52=x        contDetalheJ+=1        contDetalheJT+=1        fout.write('Registro Detalhe segmento J52:\n')        compara(x,1,3,'001')        compara(x,4,7,L[HLJ][3:7])        compara(x,9,13,str(contDetalheJ).zfill(5))        compara(x,15,15,' ')        compara(x,16,17,['00','99'])        compara(x,20,20,['1','2'])        if L[x][19]=='1':            verificaCPF(x,21,35)        elif L[x][19]=='2':            verificaCNPJ(x,21,35)        verificaTipo(x,36,75,'name')        compara(x,76,76,['1','2'])        if L[x][75]=='1':            verificaCPF(x,77,91)        elif L[x][75]=='2':            verificaCNPJ(x,77,91)        verificaTipo(x,92,131,'name')        compara(x,132,132,['0','1','2'])        if L[x][131]=='0':            compara(x,133,147,'000000000000000')            compara(x,147,187,'                                        ')        elif L[x][131]=='1':            verificaCPF(x,133,147)            verificaTipo(x,133,147,'name')        elif L[x][131]=='2':            verificaCNPJ(x,133,147)            verificaTipo(x,133,147,'name')        compara(x,188,240,'                                                     ')        fout.write('\n')#Registro Trailer de Lote:    if L[x][7]=='5' and HL=='AB':        TLAB=x        fout.write('Registro Trailer de Lote AB:\n')        compara(x,1,3,'001')        compara(x,4,7,L[HLAB][3:7])        compara(x,9,17,'         ')        compara(x,18,23,str(contDetalheAB+2).zfill(6))        compara(x,24,41,str(somaA).zfill(18))        compara(x,42,59,'000000000000000000')        compara(x,60,65,'000000')        compara(x,66,230,'                                                                                                                                                                     ')        compara(x,231,240,'          ')        fout.write('\n')    elif L[x][7]=='5' and HL=='J':        TLJ=x        fout.write('Registro Trailer de Lote J:\n')        compara(x,1,3,'001')        compara(x,4,7,L[HLJ][3:7])        compara(x,9,17,'         ')        compara(x,18,23,str(contDetalheJ+2).zfill(6))        compara(x,24,41,str(somaJ).zfill(18))        compara(x,42,59,'000000000000000000')        compara(x,60,65,'000000')        compara(x,66,230,'                                                                                                                                                                     ')        compara(x,231,240,'          ')        fout.write('\n')        #Registro Trailer de Arquivo:    if L[x][7]=='9':        TA=x        fout.write('Registro Trailer de Arquivo:\n')        compara(x,1,3,'001')        compara(x,4,7,'9999')        compara(x,9,17,'         ')        compara(x,18,23,str(contHL).zfill(6))        compara(x,24,29,str(contDetalheABT + contDetalheJT + 2*contHL + 2).zfill(6))        compara(x,30,35,'000000')        compara(x,36,240,'                                                                                                                                                                                                             ')        fout.write('\n')        fout.close()        Fim = input('Arquivo "Resultado da análise" gerado. Digite ENTER para finalizar.')        